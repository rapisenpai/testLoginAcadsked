# Generated by Django 5.0.8 on 2024-10-14 17:31

import apps.user.common.account_compress_image
import apps.user.common.phone_validators
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('curriculum', '__first__'),
        ('institutes', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('profile_image', apps.user.common.account_compress_image.ProfileImageField(blank=True, null=True, upload_to='profile_image/')),
                ('cover_image', apps.user.common.account_compress_image.CoverImageField(default='cover_image/111092024231832.jpg', upload_to='cover_image/')),
                ('phone_number', models.CharField(blank=True, help_text='Enter a phone number in the format: 09-XXXXX-YYYY', max_length=11, null=True, validators=[apps.user.common.phone_validators.validate_ph_phone_number])),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Other')], max_length=1)),
                ('user_type', models.IntegerField(choices=[(1, 'registrar'), (2, 'vpaa'), (3, 'dean'), (4, 'progchair'), (5, 'faculty')], default=5)),
                ('employment_status', models.IntegerField(blank=True, choices=[(1, 'Permanent'), (2, 'Temporary'), (3, 'Casual'), (4, 'Contract of Service'), (5, 'Job Order'), (6, 'Coterminous'), (7, 'Contractual')], null=True)),
                ('position', models.IntegerField(choices=[(1, 'Instructor I'), (2, 'Instructor II'), (3, 'Instructor III'), (4, 'Assistant Professor I'), (5, 'Assistant Professor II'), (6, 'Assistant Professor III'), (7, 'Assistant Professor IV'), (8, 'Associate Professor I'), (9, 'Associate Professor II'), (10, 'Associate Professor III'), (11, 'Associate Professor IV'), (12, 'Associate Professor V'), (13, 'Professor I'), (14, 'Professor II'), (15, 'Professor III'), (16, 'Professor IV'), (17, 'Professor V'), (18, 'Professor VI'), (19, 'College Professor')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('institute', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='institutes.institutes')),
                ('program', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='curriculum.programs')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Faculty and Staff',
                'verbose_name_plural': 'Faculty and Staff',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('status', models.IntegerField(choices=[(1, 'Unread'), (2, 'Read'), (3, 'Dismissed')], default=1)),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('notification_url', models.CharField(blank=True, max_length=500, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=255)),
                ('semester', models.CharField(choices=[('1', 'First Semester'), ('2', 'Second Semester'), ('3', 'Third Semester')], max_length=1)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('curriculum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curriculum.curriculumyear')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institutes.institutes')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curriculum.programs')),
            ],
            options={
                'verbose_name': 'User Group',
                'verbose_name_plural': 'User Groups',
                'db_table': 'user_groups',
                'unique_together': {('group_name', 'program', 'institute', 'semester', 'curriculum')},
            },
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('member_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_assigned', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('courses', models.ManyToManyField(blank=True, to='curriculum.courses')),
                ('institute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='institutes.institutes')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='curriculum.programs')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.usergroup')),
            ],
            options={
                'verbose_name': 'Group Member',
                'verbose_name_plural': 'Group Members',
                'db_table': 'group_members',
                'unique_together': {('group', 'user')},
            },
        ),
    ]
