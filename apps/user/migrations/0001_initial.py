# Generated by Django 4.2.11 on 2024-07-25 04:53

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=150, null=True)),
                ('suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('gender', models.CharField(blank=True, choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Other')], max_length=1, null=True)),
                ('user_type', models.IntegerField(blank=True, choices=[(1, 'admin'), (2, 'vpaa'), (3, 'dean'), (4, 'progchair'), (5, 'faculty'), (6, 'student')], null=True)),
                ('employment_status', models.IntegerField(blank=True, choices=[(1, 'Permanent'), (2, 'Temporary'), (3, 'Casual'), (4, 'Contract of Service'), (5, 'Job Order'), (6, 'Coterminous'), (7, 'Contractual')], null=True)),
                ('institute', models.IntegerField(blank=True, choices=[(1, 'Institute of Computing'), (2, 'Institute of Aquatic and Applied Sciences'), (3, 'Institute of Leadership, Entrepreneurship and Good Governance'), (4, 'Institute of Teacher Education')], null=True)),
                ('position', models.IntegerField(blank=True, choices=[(1, 'Instructor I'), (2, 'Instructor II'), (3, 'Instructor III'), (4, 'Assistant Professor I'), (5, 'Assistant Professor II'), (6, 'Assistant Professor III'), (7, 'Assistant Professor IV'), (8, 'Associate Professor I'), (9, 'Associate Professor II'), (10, 'Associate Professor III'), (11, 'Associate Professor IV'), (12, 'Professor I'), (13, 'Professor II'), (14, 'Professor III'), (15, 'Professor IV'), (16, 'Professor V'), (17, 'Professor VI'), (18, 'College Professor')], null=True)),
                ('designation', models.IntegerField(blank=True, choices=[(1, 'Dean'), (2, 'Program Chair')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
